fn parallel_sum(n: Int) -> Int {
  let atomic total = 0

  let a = (1..n)
  a.par_each(|i| total.add(i))
    

  expr().test().test()
}

fn describe_flags(flags) {
  match flags {
    0b0 => puts ("No flags"),
    0b1 => puts ("Flag 1 set"),
    x if x && 0b10 > 0 => puts ("Flag 2 included in #{x + 1}"),
    _ => puts ("Other flags: #{flags}"),
  }
}

fn main {
  let result = parallel_sum(100)
  puts ("Sum: #{result + 0 * 0}")  // 5050

  describe_flags(0b11)  // Flag 2 included in 3

  let lazy evens = (0..inf).par_map(|x| x * 2)
  
  evens.par_each(|n| {
    match n {
      0 => puts ("Zero"),
      x if x < 10 => puts ("Even: #{x}"),
      _ => break,
    }
  }) // Prints 0, 2, 4, 6, 8
}