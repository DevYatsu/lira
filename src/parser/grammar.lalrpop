grammar<'i>;
use crate::ast::*;
use crate::parser::string::process_parser_string;
use crate::lexer::{
    tokens::{LexingError, Token},
    str_litteral::StringPart,
};

Comma<T>: Vec<T> = {
    skip <mut v: (<T> "," skip)*> <e:T?> => match e {
        None => v,
        Some(e) => { v.push(e); v }
    }
};

Param: (&'i str, Option<Type<'i>>) = {
    <name:"identifier"> skip <ty:(":" skip <Type> skip)?> => (name, ty),
};
Arg: Expr<'i> = {
    <expr:ExprOrClosure> skip => expr,
};

Params: Vec<(&'i str, Option<Type<'i>>)> = {
    <params: Comma<Param>> => params,
};
Args: Vec<Expr<'i>> = {
    <args: Comma<Arg>> => args,
};

block_body: Vec<Statement<'i>> = (<Statement> skip)*;
skip: () = unique_skip*;
unique_skip: () = {"line_end" => (), Comment => ()};

Comment: Comment<'i> = {
    <"line_comment"> => Comment::Line(<>),
    <"block_comment"> => Comment::Block(<>),
    <"doc_comment"> => Comment::Doc(<>),
};

Comments: Vec<Comment<'i>> = {
    <comments:Comment*> => comments,
};

pub Program: Program<'i> = {
    skip <stmts: block_body>  => Program { statements: stmts },
};

// Statements
Statement: Statement<'i> = {
    Let,
    FnDecl,
    Break,
    Return,
    TypeAlias,
    Struct,
    Enum,
    Use,
    MatchStmt,
    ForLoop,
    WhileLoop,
    Spawn,
    If,

    ExprStmt
};

TypeAlias: Statement<'i> = {
    "typealias" <name:"identifier"> "=" <ty:Type> => Statement::TypeAlias {
        name: name,
        ty,
    },
};

Use: Statement<'i> = {
    "use" <path:Path> <alias:("as" <"identifier">)?> => Statement::Use {
        path,
        alias: alias.map(|s| s), // Convert Option<&str> to Option<String>
    }
};

// Rust-like path (e.g., "foo::bar::baz" -> Vec["foo", "bar", "baz"])
Path: Vec<&'i str> = {
    <head:"identifier"> "::" <tail:Path> => {
        let mut vec = vec![head];
        vec.extend(tail);
        vec
    },
    <id:"identifier"> => {
        let mut vec = Vec::new();
        vec.push(id);
        vec
    },
};


Struct: Statement<'i> = {
    "struct" skip <name:"identifier"> "{" <fields:Comma<StructField>> "}" => Statement::Struct {
        name: name,
        fields,
    },
};

StructField: (&'i str, Type<'i>) = {
    <name:"identifier"> skip ":" skip <ty:Type> skip => (name, ty),
};

Enum: Statement<'i> = {
    "enum" skip <name:"identifier"> skip "{" <variants:Comma<EnumVariant>> "}" => Statement::Enum {
        name: name,
        variants,
    },
};

EnumVariant: EnumVariant<'i> = {
    <name:"identifier"> <data:(skip <EnumVariantData>)?> skip => match data {
        None => EnumVariant::Unit(name),
        Some(EnumVariantData::Tuple(types)) => EnumVariant::Tuple(name, types),
        Some(EnumVariantData::Struct(fields)) => EnumVariant::Struct(name, fields),
    },
};

EnumVariantData: EnumVariantData<'i> = {
    "(" <types:TypesList> ")" => EnumVariantData::Tuple(types),
    "{" <fields:Params> "}" => EnumVariantData::Struct(fields),
};

Return: Statement<'i> = {
    "return" skip <expr:ExprOrClosure> => Statement::Return(expr),
};

FnDecl: Statement<'i> = {
    <_async:"async"?> "fn" skip <name:"identifier"> skip <params:("(" <Params> ")" skip)?> <ret:("->" skip <Type> skip)?> "{" skip <body:block_body> "}" => Statement::FnDecl {
        name: name,
        _async: _async.is_some(),
        params: params.unwrap_or(vec![]),
        return_type: ret,
        body: body,
    },
};


Let: Statement<'i> = {
    "let" <modifiers:(skip <Modifier>)*> skip <name:LetName> <ty:(":" skip <Type> skip)?> "=" skip <value:ExprOrClosure> => Statement::Let {
        atomic: modifiers.contains(&"atomic"),
        lazy: modifiers.contains(&"lazy"),
        mutable: modifiers.contains(&"mut"),
        name,
        ty,
        value,
    }
};

LetName: LetName<'i> = {
    <name:"identifier"> skip "{" <fields:Comma<StructFieldDestructure>> "}" => LetName::StructDestructure(
        name,
        fields,
    ),
    <name:"identifier"> => LetName::Ident(name),
    "(" <names:Comma<LetName>> ")" => LetName::TupleDestructure(names),
    "[" <names:Comma<LetName>> "]" => LetName::ArrayDestructure(names),
};

StructFieldDestructure: (&'i str, Option<&'i str>) = {
    <name:"identifier"> <new_name:(skip ":" skip <"identifier">)?> => (name, new_name.map(|s| s)),
};

Modifier: &'static str =  {
    "atomic" => "atomic",
    "lazy" => "lazy",
    "mut" => "mut",
};

ForLoop: Statement<'i> = {
    "for" skip <iterator:"identifier"> skip "in" skip <range:Expr> skip "{" skip <body:block_body> "}" => Statement::ForLoop {
        iterator,
        range,
        body,
    },
};

WhileLoop: Statement<'i> = {
    "while" skip <condition:Expr> skip "{" skip <body:block_body> "}" => Statement::WhileLoop {
        condition,
        body,
    },
};

Break: Statement<'i> = {
    "break" => Statement::Break,
};


Spawn: Statement<'i> = {
    "spawn" skip <with:("with" skip <Expr> skip)?>  "{" skip <body:block_body> "}" => Statement::Spawn {
        body,
        with,
    },
};


Match: Match<'i> = {
    "match" skip <expr:Expr> skip "{" <arms:MatchArm*> skip "}" => Match {
        expr,
        arms,
    },
};

MatchExpr: Expr<'i> = {
   Match => Expr::Match(Box::new(<>))
}

MatchStmt: Statement<'i> = {
    Match => Statement::Match(<>)
}

// need to add destructuring of enums
MatchArm: MatchArm<'i> = {
    skip <pattern:Pattern> skip <guard:("if" skip <Expr> skip)?> "=>" skip <body:MatchBody>
    => MatchArm {
        pattern,
        body,
        guard
    },
};

MatchBody: Vec<Statement<'i>> = {
    <expr:Expr> skip "," => vec![Statement::Expr(expr)], 
    "{" skip <stmts:block_body> "}" => stmts,
    "break" skip "," => vec![Statement::Break],
};

Pattern: Pattern<'i> = {
    <lit:Literal> => Pattern::Literal(lit),
    <id:"identifier"> "(" <args:Comma<"identifier">> ")" => Pattern::FunctionDestructor(id, args),
    <id:"identifier"> "{" <fields:Comma<StructFieldDestructure>> "}" => Pattern::StructLikeDestructor(id, fields),
    <id:"identifier"> => Pattern::Ident(id),    
    "_" => Pattern::Wildcard,
};

If: Statement<'i> = {
    "if" skip <condition:Expr> skip "{" skip <body:block_body> "}" <else_ifs:ElseIf*> <else_body:Else?>
    => Statement::If {
        condition,
        body,
        else_ifs,
        else_body,
    },
};

ElseIf: (Expr<'i>, Vec<Statement<'i>>) = {
    "elsif" skip <condition:Expr> skip "{" skip <body:block_body> "}" => (condition, body),
    "else" skip "if" skip <condition:Expr> skip "{" skip <body:block_body> "}" => (condition, body),
};

Else: Vec<Statement<'i>> = {
    "else" skip "{" skip <body:block_body> "}" => body,
};

TypeArg: Type<'i> = {
    <ty:Type> skip => ty,
};
TypesList: Vec<Type<'i>> = { 
    <args: Comma<TypeArg>> => args,
};

pub Type: Type<'i> = {
    // <lhs:Type> "|" <rhs:BasicType> => Type::Union(Box::new(lhs), Box::new(rhs)),
    "async" skip <BasicType> => Type::Awaitable(Box::new(<>)),
    BasicType, 
};

BasicType: Type<'i> = {
    "[" <ty:TypesList> "]" => Type::Array(ty),
    "(" <ty:TypesList> ")" => Type::Tuple(ty),
    "(" <args:TypesList> ")" ":" skip <ret:Type> => Type::Function(args, Box::new(ret)),
    <val:"identifier"> => Type::Ident(val),
}

ExprOrClosure: Expr<'i> = {
    MatchExpr,
    Closure,
    "await" skip <expr:Expr> => Expr::Awaitable(Box::new(expr)),
    Expr,
};

// todo! parse strings
// Expressions in Lira
pub Expr: Expr<'i> = {
    // Precedence levels from lowest to highest

    #[precedence(level = "11")] #[assoc(side = "left")]
    <lhs:Expr> "|>" skip <rhs:Expr> => Expr::Pipe(Box::new(lhs), Box::new(rhs)),

    #[precedence(level = "10")] #[assoc(side = "left")]
    <lhs:Expr> "||" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Or, Box::new(rhs)),

    #[precedence(level = "9")] #[assoc(side = "left")]
    <lhs:Expr> "&&" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::And, Box::new(rhs)),

    #[precedence(level = "8")] #[assoc(side = "left")]
    <lhs:Expr> "|" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::BitOr, Box::new(rhs)),

    #[precedence(level = "7")] #[assoc(side = "left")]
    <lhs:Expr> "^" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::BitXor, Box::new(rhs)),

    #[precedence(level = "6")] #[assoc(side = "left")]
    <lhs:Expr> "&" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::BitAnd, Box::new(rhs)),

    #[precedence(level = "5")] #[assoc(side = "left")]
    <lhs:Expr> "<<" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::ShiftLeft, Box::new(rhs)),
    <lhs:Expr> ">>" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::ShiftRight, Box::new(rhs)),

    #[precedence(level = "4")] #[assoc(side = "left")]
    <lhs:Expr> "==" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Eq, Box::new(rhs)),
    <lhs:Expr> "!=" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Neq, Box::new(rhs)),
    <lhs:Expr> "<" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Lt, Box::new(rhs)),
    <lhs:Expr> "<=" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Le, Box::new(rhs)),
    <lhs:Expr> ">" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Gt, Box::new(rhs)),
    <lhs:Expr> ">=" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Ge, Box::new(rhs)),
    <lhs:Expr> ".." skip <rhs:Expr> => Expr::Range(Box::new(lhs), Box::new(rhs)),

    #[precedence(level = "3")] #[assoc(side = "left")]
    <lhs:Expr> "+" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Plus, Box::new(rhs)),
    <lhs:Expr> "-" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Minus, Box::new(rhs)),

    #[precedence(level = "2")] #[assoc(side = "left")]
    <lhs:Expr> "*" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Multiply, Box::new(rhs)),
    <lhs:Expr> "/" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Divide, Box::new(rhs)),
    <lhs:Expr> "%" skip <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Modulo, Box::new(rhs)),

    #[precedence(level = "1")] #[assoc(side = "right")]
    "!" <rhs:Expr> => Expr::Unary(UnaryOp::Not, Box::new(rhs)),
    "-" <rhs:Expr> => Expr::Unary(UnaryOp::Minus, Box::new(rhs)),
    "+" <rhs:Expr> => Expr::Unary(UnaryOp::Plus, Box::new(rhs)),
    "~" <rhs:Expr> => Expr::Unary(UnaryOp::BitNot, Box::new(rhs)),

    #[precedence(level = "0")]
    PostfixExpr,
};

ExprStmt: Statement<'i> = {
    <lhs:LValue> <op:AssignOp> skip <rhs:Expr> => Statement::Expr(Expr::Assign(Box::new(lhs), op, Box::new(rhs))),
    <AllowedAloneExpr> => Statement::Expr(<>),
};

AssignOp: BinOp = {
    "=" => BinOp::Eq,
    "+=" => BinOp::Plus,
    "-=" => BinOp::Minus,
    "*=" => BinOp::Multiply,
    "/=" => BinOp::Divide,
    "%=" => BinOp::Modulo,
    "&=" => BinOp::BitAnd,
    "|=" => BinOp::BitOr,
    "^=" => BinOp::BitXor,
    "<<=" => BinOp::ShiftLeft,
    ">>=" => BinOp::ShiftRight,
};

AllowedAloneExpr: Expr<'i> = {
    <base:AllowedAloneExpr> "." <field:"identifier"> "("  <args:Args> ")" => Expr::Call(Box::new(Expr::FieldAccess(Box::new(base), field)), args),
    <base:AllowedAloneExpr> "(" <args:Args> ")"  => Expr::Call(Box::new(base), args),
    <base:LValue> "(" <args:Args> ")"  => Expr::Call(Box::new(base), args),
};

LValue: Expr<'i> = {
    <base:LValue> "[" skip <index:Expr> skip "]" => Expr::Index(Box::new(base), Box::new(index)),
    <base:LValue> "." skip <field:"identifier">  => Expr::FieldAccess(Box::new(base), field),
    <val:"identifier"> => Expr::Ident(val),
};

// Postfix expressions (field access and function calls)
PostfixExpr: Expr<'i> = {
    <base:PostfixExpr> "." skip <field:"identifier"> => Expr::FieldAccess(Box::new(base), field),
    <base:PostfixExpr> "(" <args:Args> ")" => Expr::Call(Box::new(base), args),
    Term,
};

pub Term: Expr<'i> = {
    <val:Literal> => Expr::Literal(val),
    "[" <args:Args> "]" => Expr::Array(args),
    "(" <args:Args> ")" => Expr::Tuple(args),
    <val:"identifier"> => Expr::Ident(val),
};

// Primary Terms (Literals, Variables, Parentheses)
pub Literal: Literal<'i> = {
    <val:"int"> => Literal::Int(val),
    <val:"float"> => Literal::Float(val),
    <val:"string"> => {
        Literal::String(process_parser_string(val))
    },
    <val:"binary"> => Literal::Int(val),
    <val:"octal"> => Literal::Int(val),
    <val:"hex"> => Literal::Int(val),
    "true" => Literal::Bool(true),
    "false" => Literal::Bool(false),
    "inf" => Literal::Inf,
};

Closure: Expr<'i> = {
    "|" <params:Params> "|" skip <body:ClosureBody>  => Expr::Closure(
        params,
        body,
    ),
};
ClosureBody: Vec<Statement<'i>> = {
    "{" skip <body:block_body> "}" => body,
    <Return> => vec![<>],
    <Expr> => vec![Statement::Expr(<>)],
};

extern {
  type Location = usize;
  type Error = LexingError;

    enum Token<'i> {
        // Keywords
        "fn" => Token::Fn,
        "let" => Token::Let,
        "struct" => Token::Struct,
        "enum" => Token::Enum,

        "use" => Token::Use,
        "as" => Token::As,
        "::" => Token::DoubleColon,

        "if" => Token::If,
        "elsif" => Token::Elsif,
        "else" => Token::Else,
        "spawn" => Token::Spawn,
        "shared" => Token::Shared,
        "with" => Token::With,
        "atomic" => Token::Atomic,
        "mut" => Token::Mut,
        "match" => Token::Match,
        "lazy" => Token::Lazy,
        "inf" => Token::Inf,
        "for" => Token::For,
        "in" => Token::In,
        "while" => Token::While,
        "break" => Token::Break,
        "true" => Token::True,
        "false" => Token::False,
        "typealias" => Token::TypeAlias,
        "return" => Token::Return,
        "=>" => Token::MatchReturn,
        "async" => Token::Async,
        "await" => Token::Await,

        // Identifiers
        "identifier" => Token::Ident(<&'i str>),

        // Literals
        "int" => Token::Int(<i32>),
        "float" => Token::Float(<f64>),
        "binary" => Token::Binary(<i32>),
        "octal" => Token::Octal(<i32>),
        "hex" => Token::Hex(<i32>),
        "string" => Token::String(<Vec<StringPart<'i>>>),

        // Symbols and operators
        ":" => Token::Colon,
        "->" => Token::Arrow,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "," => Token::Comma,
        "." => Token::Dot,
        ".." => Token::Range,
        "_" => Token::Wildcard,

        // Assignment operators
        "=" => Token::Equals,
        "+=" => Token::PlusEquals,
        "-=" => Token::MinusEquals,
        "*=" => Token::StarEquals,
        "/=" => Token::SlashEquals,
        "%=" => Token::PercentEquals,
        "&=" => Token::AndEquals,
        "|=" => Token::OrEquals,
        "^=" => Token::XorEquals,
        "<<=" => Token::ShlEquals,
        ">>=" => Token::ShrEquals,

        // Arithmetic operators
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Percent,

        // Logical operators
        "&&" => Token::And,
        "||" => Token::Or,
        "!" => Token::Not,

        // Comparison operators
        "==" => Token::EqualsEquals,
        "!=" => Token::NotEquals,
        "<" => Token::Less,
        "<=" => Token::LessEquals,
        ">" => Token::Greater,
        ">=" => Token::GreaterEquals,

        // Bitwise operators
        "&" => Token::BitAnd,
        "|" => Token::BitOr,
        "^" => Token::BitXor,
        "~" => Token::BitNot,
        "<<" => Token::Shl,
        ">>" => Token::Shr,

        // Pipe operators
        "|>" => Token::Pipe,

        // Comments and whitespace
        "line_comment" => Token::LineComment(<&'i str>),
        "block_comment" => Token::BlockComment(<&'i str>),
        "doc_comment" => Token::DocComment(<&'i str>),
        "line_end" => Token::LineEnd,
    }
}
