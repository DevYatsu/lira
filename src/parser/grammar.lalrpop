grammar;
use crate::ast::*;
use crate::lexer::{
    tokens::{LexingError, Token},
    str_litteral::StringPart,
};


Comma<T>: Vec<T> = { 
    <mut v: (<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => { v.push(e); v }
    }
};

Param: (String, Option<Type>) = {
    skip <name:"identifier"> skip <ty:(":" skip <Type> skip)?> => (name.to_owned(), ty),
};
Arg: Expr = {
    skip <expr:Expr> skip => expr,
};

Params: Vec<(String, Option<Type>)> = { 
    <params: Comma<Param>> => params,
};
Args: Vec<Expr> = { 
    <args: Comma<Arg>> => args,
};


block_body: Vec<Statement> = (<Statement> skip)*;
skip: () = unique_skip*;
unique_skip: () = {"line_end" => (), "line_comment" => (), "block_comment" => ()};

pub Program: Program = {
    skip <stmts: block_body>  => Program { statements: stmts },
};

// Statements
Statement: Statement = {
    Let,
    FnDecl,
    Match,
    ForLoop,
    Break,
    WhileLoop,
    Spawn,
    If,
    Return,
    ExprStmt
};

Return: Statement = {
    "return" <expr:Expr> => Statement::Return(expr),
};

FnDecl: Statement = {
    "fn" skip <name:"identifier"> skip <params:("(" <Params> ")" skip)?> <ret:("->" skip <Type> skip)?> "{" skip <body:block_body> "}" => Statement::FnDecl {
        name: name.to_owned(),
        params: params.unwrap_or(vec![]),
        return_type: ret,
        body: body,
    },
};


Let: Statement = {
    "let" <modifiers:(skip <Modifier>)*> skip <name:"identifier"> skip <ty:(":" skip <Type> skip)?>  "=" skip <value:Expr> => (Statement::Let {
        atomic: modifiers.contains(&"atomic"),
        lazy: modifiers.contains(&"lazy"),
        mutable: modifiers.contains(&"mut"),
        name,
        ty,
        value,
    }),
};

Modifier: &'static str =  {
    "atomic" => "atomic",
    "lazy" => "lazy",
    "mut" => "mut",
};

ForLoop: Statement = {
    "for" skip <iterator:"identifier"> skip "in" skip <range:Expr> skip "{" skip <body:block_body> "}" => Statement::ForLoop {
        iterator,
        range,
        body,
    },
};

WhileLoop: Statement = {
    "while" skip <condition:Expr> skip "{" skip <body:block_body> "}" => Statement::WhileLoop {
        condition,
        body,
    },
};

Break: Statement = {
    "break" => Statement::Break,
};


Spawn: Statement = {
    "spawn" skip <with:("with" skip <Expr> skip)?>  "{" skip <body:block_body> "}" => Statement::Spawn {
        body,
        with,
    },
};

Match: Statement = {
    "match" skip <expr:Expr> skip "{" <arms:MatchArm*> skip "}" => Statement::Match {
        expr: expr,
        arms: arms,
    },
};

MatchArm: MatchArm = {
    skip <pattern:Pattern> skip <guard:("if" skip <Expr> skip)?> "return" skip <body:MatchBody>
    => MatchArm {
        pattern,
        body,
        guard
    },
};

MatchBody: Vec<Statement> = {
    <expr:Expr> skip "," => vec![Statement::Expr(expr)], 
    "{" skip <stmts:block_body> "}" => stmts,
};

Pattern: Pattern = {
    <lit:Literal> => Pattern::Literal(lit),
    <id:"identifier"> => Pattern::Ident(id),
    "_" => Pattern::Wildcard,
};

If: Statement = {
    "if" skip <condition:Expr> skip "{" skip <body:block_body> "}" <else_ifs:ElseIf*> <else_body:Else?>
    => Statement::If {
        condition,
        body,
        else_ifs,
        else_body,
    },
};

ElseIf: (Expr, Vec<Statement>) = {
    "elsif" skip <condition:Expr> skip "{" skip <body:block_body> "}" => (condition, body),
};

Else: Vec<Statement> = {
    "else" skip "{" skip <body:block_body> "}" => body,
};

TypeArg: Type = {
    skip <ty:Type> skip => ty,
};
TypesList: Vec<Type> = { 
    <args: Comma<TypeArg>> => args,
};

pub Type: Type = {
    // #[precedence(level = "2")]
    // <lhs:BasicType> "|" <rhs:BasicType> => Type::Union(Box::new(lhs), Box::new(rhs)),

    #[precedence(level = "1")]
    BasicType,
};

BasicType: Type = {
    "[" <ty:TypesList> "]" => Type::Array(ty),
    "(" <ty:TypesList> ")" => Type::Tuple(ty),
    "fn" "(" <args:TypesList> ")" "->" <ret:Type> => Type::Function(args, Box::new(ret)),
    <val:"identifier"> => Type::Ident(val.to_owned()),
}

// Expressions in Lira
pub Expr: Expr = {
    // Precedence levels from lowest to highest
    #[precedence(level = "10")] #[assoc(side = "left")]
    <lhs:Expr> "|>" <rhs:Expr> => Expr::Pipe(Box::new(lhs), Box::new(rhs)),

    #[precedence(level = "9")] #[assoc(side = "left")]
    <lhs:Expr> "||" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Or, Box::new(rhs)),

    #[precedence(level = "8")] #[assoc(side = "left")]
    <lhs:Expr> "&&" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::And, Box::new(rhs)),

    #[precedence(level = "7")] #[assoc(side = "left")]
    <lhs:Expr> "==" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Eq, Box::new(rhs)),
    <lhs:Expr> "!=" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Neq, Box::new(rhs)),
    <lhs:Expr> "<" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Lt, Box::new(rhs)),
    <lhs:Expr> "<=" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Le, Box::new(rhs)),
    <lhs:Expr> ">" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Gt, Box::new(rhs)),
    <lhs:Expr> ">=" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Ge, Box::new(rhs)),
    <lhs:Expr> ".." <rhs:Expr> => Expr::Range(Box::new(lhs), Box::new(rhs)),

    #[precedence(level = "6")] #[assoc(side = "left")]
    <lhs:Expr> "+" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Plus, Box::new(rhs)),
    <lhs:Expr> "-" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Minus, Box::new(rhs)),

    #[precedence(level = "5")] #[assoc(side = "left")]
    <lhs:Expr> "*" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Multiply, Box::new(rhs)),
    <lhs:Expr> "/" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Divide, Box::new(rhs)),
    <lhs:Expr> "%" <rhs:Expr> => Expr::Binary(Box::new(lhs), BinOp::Modulo, Box::new(rhs)),

    #[precedence(level = "4")] #[assoc(side = "right")]
    "!" <rhs:Expr> => Expr::Unary(UnaryOp::Not, Box::new(rhs)),
    "-" <rhs:Expr> => Expr::Unary(UnaryOp::Minus, Box::new(rhs)),

    #[precedence(level = "1")]
    PostfixExpr,

    Closure,
};

ExprStmt: Statement = {
    <lhs:LValue> "=" <rhs:Expr> => Statement::Expr(Expr::Assign(Box::new(lhs), Box::new(rhs))),
    <base:"identifier"> "(" <args:Args> ")" => Statement::Expr(Expr::Call(Box::new(Expr::Ident(base.to_owned())), args)),
};

LValue: Expr = {
    <base:LValue> "[" <index:Expr> "]" => Expr::Index(Box::new(base), Box::new(index)),
    <base:LValue> "." <field:"identifier">  => Expr::FieldAccess(Box::new(base), field.to_owned()),
    <val:"identifier"> => Expr::Ident(val.to_owned()),
};

// Postfix expressions (field access and function calls)
PostfixExpr: Expr = {
    <base:PostfixExpr> "." <field:"identifier"> => Expr::FieldAccess(Box::new(base), field.to_owned()),
    <base:PostfixExpr> "(" <args:Args> ")" => Expr::Call(Box::new(base), args),
    Term,
};

pub Term: Expr = {
    <val:Literal> => Expr::Literal(val),
    <val:"identifier"> => Expr::Ident(val.to_owned()),
    "(" <expr:Expr> ")" => expr,
};

// Primary Terms (Literals, Variables, Parentheses)
pub Literal: Literal = {
    <val:"int"> => Literal::Int(val),
    <val:"float"> => Literal::Float(val),
    <val:"string"> => Literal::String(val),
    <val:"binary"> => Literal::Int(val),
    <val:"octal"> => Literal::Int(val),
    <val:"hex"> => Literal::Int(val),
    "true" => Literal::Bool(true),
    "false" => Literal::Bool(false),
    "inf" => Literal::Inf,
};

Closure: Expr = {
    "|" <params:Params> "|" "{" skip <body:block_body> "}" => Expr::Closure(
        params,
        body,
    ),
};


extern {
  type Location = usize;
  type Error = LexingError;

    enum Token {
        // Keywords
        "fn" => Token::Fn,
        "let" => Token::Let,
        "struct" => Token::Struct,
        "if" => Token::If,
        "elsif" => Token::Elsif,
        "else" => Token::Else,
        "spawn" => Token::Spawn,
        "shared" => Token::Shared,
        "with" => Token::With,
        "atomic" => Token::Atomic,
        "mut" => Token::Mut,
        "match" => Token::Match,
        "lazy" => Token::Lazy,
        "inf" => Token::Inf,
        "for" => Token::For,
        "in" => Token::In,
        "while" => Token::While,
        "break" => Token::Break,
        "true" => Token::True,
        "false" => Token::False,

        "return" => Token::Return,

        // Identifiers
        "identifier" => Token::Ident(<String>),

        // Literals
        "int" => Token::Int(<i32>),
        "float" => Token::Float(<f64>),
        "binary" => Token::Binary(<i32>),
        "octal" => Token::Octal(<i32>),
        "hex" => Token::Hex(<i32>),
        "string" => Token::String(<Vec<StringPart>>),

        // Symbols and operators
        ":" => Token::Colon,
        "->" => Token::Arrow,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "," => Token::Comma,
        "." => Token::Dot,
        ".." => Token::Range,
        "_" => Token::Wildcard,

        // Assignment operators
        "=" => Token::Equals,
        "+=" => Token::PlusEquals,
        "-=" => Token::MinusEquals,
        "*=" => Token::StarEquals,
        "/=" => Token::SlashEquals,
        "%=" => Token::PercentEquals,
        "&=" => Token::AndEquals,
        "|=" => Token::OrEquals,
        "^=" => Token::XorEquals,
        "<<=" => Token::ShlEquals,
        ">>=" => Token::ShrEquals,

        // Arithmetic operators
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Percent,

        // Logical operators
        "&&" => Token::And,
        "||" => Token::Or,
        "!" => Token::Not,

        // Comparison operators
        "==" => Token::EqualsEquals,
        "!=" => Token::NotEquals,
        "<" => Token::Less,
        "<=" => Token::LessEquals,
        ">" => Token::Greater,
        ">=" => Token::GreaterEquals,

        // Bitwise operators
        "&" => Token::BitAnd,
        "|" => Token::BitOr,
        "^" => Token::BitXor,
        "~" => Token::BitNot,
        "<<" => Token::Shl,
        ">>" => Token::Shr,

        // Pipe operators
        "|>" => Token::Pipe,

        // Comments and whitespace
        "line_comment" => Token::LineComment,
        "block_comment" => Token::BlockComment,
        "line_end" => Token::LineEnd,
    }

}
